import styles from '../../styles/mobileview.module.css';
import Image from 'next/image';
import { useState, useEffect } from 'react';
import axios from 'axios';
import ExpiredPage from '../expiredpage';
import { useRouter } from 'next/router';
import ReactDOM from 'react-dom';
import UnauthorizedPage from '../unauthorizedpage';
import React from 'react';



/**
 * {
 *     "status": true,
 *     "message": "cards retrieved",
 *     "data": {
 *         "id": "7d895145-fadf-492d-b8d8-ce39d9e22168",
 *         "label": "string",
 *         "card": {
 *             "name": "Test Test",
 *             "card_number": "2483536952494016",
 *             "masked_pan": "248353******4016",
 *             "expiry": "08/28",
 *             "cvv": "123",
 *             "status": "ACTIVE",
 *             "type": "VIRTUAL",
 *             "issuer": "MASTERCARD",
 *             "currency": "USD",
 *             "balance": 0,
 *             "address": {
 *                 "street": "123 Main St",
 *                 "city": "San Francisco",
 *                 "state": "CA",
 *                 "postal_code": "94105",
 *                 "country": "US"
 *             }
 *         },
 *         "created_at": "2023-04-01T18:48:18.269Z",
 *         "updated_at": "2023-04-01T18:48:18.269Z"
 *     }
 * }
 * @returns {JSX.Element}
 */

export default function MobileView() {
    const [copied, setCopied] = useState(false);
    const [cardDetails, setCardDetails] = useState({});
    const [expired, setExpired] = useState(false);


    const liveBASE = 'https://api.wano.app';
    const stagingBase = 'https://wano-staging.herokuapp.com';
    const localBase = 'http://localhost:4444';

    const router = useRouter();
    const { reference } = router.query;


    const instance = axios.create({
        baseURL: 'https://api.wano.app',
      });

      

      instance.interceptors.request.use((config) => {
    const reference = localStorage.getItem('reference');
  
    if (reference) {
      config.headers.Authorization = `Bearer `+ reference;
    }
  
    return config;
  });
  
 

    useEffect(() => {
        const setAuthorizationToken = () => {
            if (reference) {
                axios.defaults.headers.common[
                    'Authorization'
                ] = `Bearer `+ reference;
            }
        };
        setAuthorizationToken();
    }, [reference]);



    useEffect(() => {
        const fetchCardDetails = async () => {
            try {
                const response = await axios.get(`${liveBASE}/card-issuing/view`, {
                    headers: {
                        Authorization: `Bearer `+reference,
                    },
                });
                setCardDetails(response.data.data);
            } catch (error) {
                console.error(error);
            }
        };

        if (reference) {
            fetchCardDetails();
        }

        setTimeout(() => {
            setExpired(true);
        }, 300000);
    }, [reference]);

    const handleCopy = (id) => {
        const text = document.querySelector(`#${id}`).textContent;
        navigator.clipboard.writeText(text);
        setCopied(true);
        setTimeout(() => {
            setCopied(false);
        }, 3000);
    };


    if (expired) {
        return <ExpiredPage />;
    }